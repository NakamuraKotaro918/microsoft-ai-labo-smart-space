-- リアルタイムデータ処理クエリ
-- Event HubからCosmos DBへのデータ転送と分析

-- 入力ストリーム（Event Hub）
WITH InputData AS (
    SELECT
        id,
        source,
        timestamp,
        data,
        data.deviceId as deviceId,
        data.deviceType as deviceType
    FROM [sensor-data-input]
),

-- AITRIOSデータの処理
AitriosData AS (
    SELECT
        id,
        source,
        timestamp,
        deviceId,
        deviceType,
        data.personCount as personCount,
        data.ageDistribution as ageDistribution,
        data.genderDistribution as genderDistribution,
        data.confidence as confidence,
        data.location as location
    FROM InputData
    WHERE source = 'aitrios'
),

-- Geminiデータの処理
GeminiData AS (
    SELECT
        id,
        source,
        timestamp,
        deviceId,
        deviceType,
        data.behaviorAnalysis as behaviorAnalysis,
        data.emotionAnalysis as emotionAnalysis,
        data.interactionPatterns as interactionPatterns,
        data.confidence as confidence
    FROM InputData
    WHERE source = 'gemini'
),

-- 快適君データの処理
KaitekiData AS (
    SELECT
        id,
        source,
        timestamp,
        deviceId,
        deviceType,
        data.temperature as temperature,
        data.humidity as humidity,
        data.co2 as co2,
        data.lightLevel as lightLevel,
        data.noiseLevel as noiseLevel,
        data.occupancy as occupancy
    FROM InputData
    WHERE source = 'kaiteki'
),

-- 統合データ（すべてのソース）
AllData AS (
    SELECT * FROM AitriosData
    UNION ALL
    SELECT * FROM GeminiData
    UNION ALL
    SELECT * FROM KaitekiData
),

-- 時間窓での集計（5分間隔）
TimeWindowAggregation AS (
    SELECT
        System.Timestamp() as windowEnd,
        deviceType,
        COUNT(*) as messageCount,
        AVG(CAST(confidence as float)) as avgConfidence,
        -- AITRIOS固有の集計
        SUM(CASE WHEN deviceType = 'aitrios' THEN personCount ELSE 0 END) as totalPersonCount,
        -- 快適君固有の集計
        AVG(CASE WHEN deviceType = 'kaiteki' THEN temperature ELSE NULL END) as avgTemperature,
        AVG(CASE WHEN deviceType = 'kaiteki' THEN humidity ELSE NULL END) as avgHumidity,
        AVG(CASE WHEN deviceType = 'kaiteki' THEN co2 ELSE NULL END) as avgCO2
    FROM AllData
    GROUP BY deviceType, TumblingWindow(minute, 5)
),

-- 異常検知
AnomalyDetection AS (
    SELECT
        windowEnd,
        deviceType,
        messageCount,
        avgConfidence,
        totalPersonCount,
        avgTemperature,
        avgHumidity,
        avgCO2,
        -- 異常判定ロジック
        CASE 
            WHEN avgTemperature > 30 OR avgTemperature < 15 THEN 'Temperature Anomaly'
            WHEN avgHumidity > 80 OR avgHumidity < 30 THEN 'Humidity Anomaly'
            WHEN avgCO2 > 1000 THEN 'CO2 Anomaly'
            WHEN avgConfidence < 0.7 THEN 'Low Confidence'
            ELSE 'Normal'
        END as anomalyStatus
    FROM TimeWindowAggregation
)

-- 出力1: リアルタイムデータ（Cosmos DB）
SELECT
    id,
    source,
    timestamp,
    deviceId,
    deviceType,
    data,
    'sensor-data' as collectionName
INTO [cosmosdb-output]
FROM InputData;

-- 出力2: 集計データ（Cosmos DB）
SELECT
    windowEnd as id,
    deviceType,
    messageCount,
    avgConfidence,
    totalPersonCount,
    avgTemperature,
    avgHumidity,
    avgCO2,
    anomalyStatus,
    'analysis-data' as collectionName
INTO [cosmosdb-aggregation-output]
FROM AnomalyDetection;

-- 出力3: 異常アラート（Event Hub）
SELECT
    windowEnd as timestamp,
    deviceType,
    anomalyStatus,
    avgTemperature,
    avgHumidity,
    avgCO2,
    'anomaly-alerts' as eventHubName
INTO [eventhub-alerts-output]
FROM AnomalyDetection
WHERE anomalyStatus != 'Normal';
